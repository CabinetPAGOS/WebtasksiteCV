<!DOCTYPE html>
<html lang="fr">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link rel="icon" href="\img\logoPagosImg02.png" type="image/x-icon">
		<title>Création d'une WebTask</title>

		<!-- Bootstrap CSS -->
		<link
		href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">

		<!-- FontAwesome (pour les icônes) -->
		<link
		href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

		<!-- Custom CSS -->
		<style>
			body {
				font-family: 'Helvetica', Arial, sans-serif;
			}
			/* Navbar */
			/* Navbar */
			.navbar-custom {
				background-color: #818285;
				border-style: none;
			}

			.navbar-custom .nav-link {
				color: #ffffff;
				font-size: 19px;
			}

			.navbar-custom .nav-link:hover {
				color: #000000;
			}

			.img-navbar {
				width: 100%;
				height: 80px;
			}

			.navbar-toggler-icon {
				color: white;
			}
			/* Assurer que le dropdown est bien aligné à droite et ne dépasse pas */
			.navbar-nav .dropdown-menu {
				position: absolute;
				right: 0; /* Alignement à droite */
				left: auto; /* Désactiver l'alignement automatique à gauche */
			}


			.dropdown-menu {
				background-color: #818285;
			}

			.dropdown-menu .dropdown-header {
				color: #ffffff;
				font-size: 16px;
			}

			.dropdown-menu .dropdown-item {
				color: #ff0000;
			}

			.dropdown-menu .dropdown-item:hover {
				background-color: #818285;
				color: #ffffff;
			}

			.title {
				text-align: center;
				background-color: #d7df22;
				padding: 1rem 25rem;
				border-radius: 5px;
				max-width: fit-content;
				margin: 10px auto;
			}

			.task-form {
				background: white;
				padding: 1rem;
				border-radius: 5px;
				max-width: 82%;
				margin: 0 auto;
				display: flex;
				flex-direction: column;
			}

			.form-row {
				display: flex;
				flex-wrap: wrap;
				gap: 1rem;
				margin-bottom: 1rem;
			}

			.form-row .form-group {
				flex: 1 1 calc(33.33% - 1rem);
			}

			.form-group {
				margin-bottom: 1rem;
			}

			.form-group label {
				font-weight: bold;
				text-decoration: underline;
			}

			.form-group div {
				width: 100%;
				padding: 0.5rem;
				border: 1px solid #000;
				border-radius: 5px;
				box-sizing: border-box;
				font-size: 16px;
				margin-bottom: 0.5rem;
			}

			.form-control {
				width: 100%;
				padding: 10px;
				border: 1px solid #ccc;
				border-radius: 5px;
				transition: border-color 0.3s;
			}

			.form-control:focus {
				border-color: #007bff;
				outline: none;
			}

			.placeholder-diagonal::placeholder {
				transform: rotate(-15deg); /* Rotation du placeholder */
				opacity: 0.6; /* Opacité pour un effet plus doux */
			}

			/* Button Styles */
			.form .btn-secondary {
				background-color: #fff;
				color: #000;
				border: 1px solid black;
				margin-right: 10px;
				padding: 10px 20px; /* Espacement interne du bouton */
				font-size: 16px; /* Taille de la police */
				border-radius: 5px;
				transition: all 0.3s ease; /* Transition pour les effets de survol */
			}

			.form .btn-secondary:hover {
				background-color: #6c757d; /* Couleur de fond au survol */
				color: #fff; /* Couleur du texte au survol */
				transform: translateY(-3px); /* Effet de levée au survol */
				border-color: #6c757d; /* Couleur de bordure au survol */
			}

			.btn-group {
				display: flex;
				justify-content: center; /* Centre les boutons */
				gap: 15px; /* Espace entre les boutons */
				margin-top: 20px;
			}

			/* Styles pour les tags */
			.tag-minor {
				background-color: green;
				font-weight: bold;
				color: white;
				padding: 5px;
				border-radius: 3px;
			}

			.tag-serious {
				background-color: yellow;
				font-weight: bold;
				color: black;
				padding: 5px;
				border-radius: 3px;
			}

			.tag-blocking {
				background-color: red;
				font-weight: bold;
				color: white;
				padding: 5px;
				border-radius: 3px;
			}

			.tag-unknown {
				background-color: grey;
				font-weight: bold;
				color: white;
				padding: 5px;
				border-radius: 3px;
			}

			/* Style pour le drop-area */
			#drop-area {
				border: 2px dashed #000;
				padding: 20px;
				text-align: center;
				cursor: pointer;
			}
			.file-details {
				margin-top: 15px;
			}

			/* Footer */
			footer {
				text-align: center;
				padding: 20px 0;
				background-color: #f4f4f4;
				border-top: 1px solid #ccc;
			}

			footer p {
				color: #333;
			}
			.btn-custom-green {
				background-color: green;
				color: white;
			}
			.btn-custom-red {
				background-color: red;
				color: white;
			}
		</style>
	</head>
	<body>
		{% if app.session.flashBag.has('error') %}
			<div class="alert alert-danger" role="alert">
				{% for message in app.session.flashBag.get('error') %}
					<p>{{ message }}</p>
				{% endfor %}
			</div>
		{% endif %}
		<nav class="navbar navbar-expand-lg navbar-custom">
			<div class="container-fluid">
				<a class="navbar-brand" href="{{ path('app_homeclient') }}">
					<img class="img-navbar" src="img/logoPagosImg04.png" alt="Logo" height="40">
				</a>
				<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarColor01" aria-controls="navbarColor01" aria-expanded="false" aria-label="Toggle navigation">
					<span class="navbar-toggler-icon">
						<i class="fas fa-bars"></i>
					</span>
				</button>
				<div class="collapse navbar-collapse" id="navbarColor01">
					<ul class="navbar-nav me-auto">
						<li class="nav-item">
							<a class="nav-link" href="{{ path('app_homeclient') }}">
								<b>Accueil</b>
							</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="{{ path('app_taches') }}">
								<b>Tâches</b>
							</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" style="color: #000" href="{{ path('app_creertaches') }}">
								<b>Créer une tâche</b>
							</a>
						</li>

						{% set allowed_ids = ['e4e080b3758761bd01758f5fcfed03d9'] %}
						{% if app.user.idclient and app.user.idclient.getId() in allowed_ids %}
							<li class="nav-item">
								<a class="nav-link" href="{{ path('app_clientsdepagos') }}">
									<b>Clients de Pagos</b>
								</a>
							</li>
						{% endif %}


					</ul>
					<ul class="navbar-nav ms-auto">
						<li class="nav-item">
							<a class="nav-link" href="#" style="color: #ffffff; text-align: center;">
								<b>{{ app.user.nom }}
									{{ app.user.prenom }}</b>
							</a>
						</li>

						<li class="nav-item dropdown">
							<a class="nav-link dropdown-toggle" href="#" id="navbarUserDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
								<img
								src="data:image/png;base64,{{ logo }}" alt="Logo du client" class="client-logo" style="width: 30px; height: 30px; border-radius: 50%;"/>
							<!-- Ajout du logo client -->
							</a>
							<ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarUserDropdown">
								<li><hr class="dropdown-divider"></li>
								<li>
									<a class="dropdown-item" href="{{ path('app_logout') }}">
										<b>
											<i class="fas fa-sign-out-alt"></i>
											Se déconnecter
										</b>
									</a>
								</li>
							</ul>
						</li>

					</ul>
				</div>
			</div>
		</nav>

		<br>

		<div class="container">
			<h3 class="title">
				<b>CRÉER UNE TÂCHE</b>
			</h3>
		</div>

		<form method="post" action="{{ path('app_creertaches') }}" id="taskForm" class="task-form">
			<div
				class="form">
				<!-- Autres champs de formulaire -->
				<div class="form-group">
					<label for="title">
						<b>
							<u>Titre de la Tâche :</u>
						</b>
					</label>
					<input type="text" id="title" name="title" placeholder="Renseigner le titre de la tâche" required class="form-control" oninput="checkTitle()">
					<div id="title-warning" style="margin-top: 5px; color: red;"></div>
				</div>


				<div class="form-group">
					<label for="description">
						<b>
							<u>Description :</u>
						</b>
					</label>
					<textarea id="description" name="description" rows="4" placeholder="Renseigner la description de la tâche" required class="form-control"></textarea>
				</div>

				<div class="form-row">
					<div class="form-group">
						<label for="due_date">
							<b>
								<u>Date de Fin Demandée :</u>
							</b>
						</label>
						<input type="date" id="due_date" name="due_date" required class="form-control">
						<small id="date_warning" style="color: red; display: none;">
							Veuillez noter qu'en cas de sélection d'une date inférieure à 48 heures à compter de ce jour, des frais additionnels pourraient être appliqués.
						</small>
					</div>

					<div class="form-group">
						<label for="tag">
							<b>
								<u>Tag :</u>
							</b>
						</label>
						<select id="tag" name="tag" class="form-control" required>
							<option value="0" style="color: green;">
								(1) Mineur
							</option>
							<option value="1" style="color: yellow;">
								(2) Grave
							</option>
							<option value="2" style="color: red;">
								(3) Bloquant
							</option>
						</select>
					</div>
				</div>
				<div class="form-group">
					<label for="fileUpload">
						<b>
							<u>Souhaitez-vous déposer des fichiers ?</u>
						</b>
					</label>
					<div>
						<button type="button" class="btn btn-success" onclick="handleFileUpload(true, '{{ googleDriveLink }}')">Oui</button>
						<button type="button" class="btn btn-danger" onclick="handleFileUpload(false)">Non</button>
					</div>
					<div id="fileUploadSection" style="display: none; margin-top: 15px;">
						<div id="fileInputContainer"></div>
					</div>
				</div>

				<div class="btn-group" role="group">
					<button type="submit" class="btn btn-secondary" id="submitButton" style="display: none;">
						<b>ENREGISTRER</b>
					</button>
				</div>

				<!-- CSS Bootstrap -->
				<link
				href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">

				<!-- JS Bootstrap -->
				<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>


				<script>
					const maxFiles = 3;
let fileCount = 0;
const fileInputContainer = document.getElementById('fileInputContainer');
const submitButton = document.getElementById('submitButton');
const fileUploadSection = document.getElementById('fileUploadSection');

function handleFileUpload(wantsToUpload, googleDriveLink) {
if (wantsToUpload) { // Ouvre le lien Google Drive dans une nouvelle fenêtre
if (googleDriveLink) {
window.open(googleDriveLink, '_blank');
}

// Afficher la section de téléchargement des fichiers
fileUploadSection.style.display = 'block';
submitButton.style.display = 'none'; // Masque le bouton "ENREGISTRER" jusqu'à saisie du titre
fileInputContainer.innerHTML = ''; // Vide les champs existants
fileCount = 0; // Réinitialise le compteur de fichiers
addFileInputFields(maxFiles); // Ajoute trois champs pour les fichiers
} else { // Masque la section de téléchargement
fileUploadSection.style.display = 'none';
fileInputContainer.innerHTML = ''; // Efface le contenu de la section pour supprimer les champs et valeurs
fileCount = 0; // Réinitialise le compteur de fichiers
submitButton.style.display = 'block'; // Affiche directement le bouton "ENREGISTRER"
}
}


function addFileInputFields(count) {
while (fileCount < count && fileCount < maxFiles) {
fileCount++;
const fileDiv = document.createElement('div');
fileDiv.classList.add('form-group');
fileDiv.innerHTML = `
                <label for="fileTitle${fileCount}"><b>Titre du fichier ${fileCount} :</b></label>
                <input type="text" id="fileTitle${fileCount}" name="fileTitle${fileCount}" class="form-control"
                       oninput="validateFileTitle()">
                <label for="fileLink${fileCount}"><b>Lien du fichier ${fileCount} :</b></label>
                <input type="text" id="fileLink${fileCount}" name="fileLink${fileCount}" class="form-control">
            `;
fileInputContainer.appendChild(fileDiv);
}
}

// Valide le titre du premier fichier pour afficher le bouton ENREGISTRER
function validateFileTitle() {
const titleField1 = document.getElementById('fileTitle1');

if (titleField1 && titleField1.value.trim() !== '') {
submitButton.style.display = 'block'; // Affiche le bouton "ENREGISTRER" si le titre du premier fichier est rempli
} else {
submitButton.style.display = 'none'; // Masque le bouton si le titre du premier fichier est vide
}
}

document.addEventListener('DOMContentLoaded', function () {
const today = new Date();
const yyyy = today.getFullYear();
const mm = String(today.getMonth() + 1).padStart(2, '0'); // Mois de 0 à 11
const dd = String(today.getDate()).padStart(2, '0'); // Jours du mois

const formattedDate = `${yyyy}-${mm}-${dd}`;
const dueDateInput = document.getElementById('due_date');
dueDateInput.setAttribute('min', formattedDate); // Définir la date minimale

dueDateInput.addEventListener('change', function () {
const inputDate = new Date(this.value);
const limitDate = new Date(today.getTime() + 48 * 60 * 60 * 1000); // 48 heures à partir de maintenant

if (inputDate < limitDate) {
document.getElementById('date_warning').style.display = 'block';
} else {
document.getElementById('date_warning').style.display = 'none';
}
});
});
				</script>


				<script>


					function showAdditionalFileQuestion() {
if (!document.getElementById('additionalFileQuestion')) {
const additionalFileQuestion = document.createElement('div');
additionalFileQuestion.id = 'additionalFileQuestion';
additionalFileQuestion.innerHTML = `
                <p>Voulez-vous déposer un autre fichier ?</p>
                <button type="button" onclick="addAnotherFile(true)">Oui</button>
                <button type="button" onclick="addAnotherFile(false)">Non</button>
            `;
fileInputContainer.appendChild(additionalFileQuestion);
}
}

function hideAdditionalFileQuestion() {
const additionalFileQuestion = document.getElementById('additionalFileQuestion');
if (additionalFileQuestion) 
additionalFileQuestion.remove();



}

function addAnotherFile(addFile) {
if (addFile && fileCount < maxFiles) {
addFileInputFields();
} else {
const submitButton = document.getElementById('submitButton');
const titleField1 = document.getElementById('fileTitle1');

if (titleField1 && titleField1.value.trim() !== '') {
submitButton.disabled = false; // Active le bouton de soumission si le titre est rempli
}hideAdditionalFileQuestion();
}
}


// Vérification du titre lors de la saisie avec affichage instantané du message d'avertissement
document.getElementById('title').addEventListener('input', function () {
const title = this.value;
const warningDiv = document.getElementById('title-warning'); // Div pour afficher les messages d'avertissement

fetch(`/check-title?title=${
encodeURIComponent(title)
}`).then(response => {
if (!response.ok) {
throw new Error('Erreur lors de la vérification du titre.');
}
return response.json();
}).then(data => {
if (data.exists) {
warningDiv.innerHTML = 'Un titre similaire existe déjà !';
warningDiv.style.color = 'red'; // Mettre le texte en rouge
} else {
warningDiv.innerHTML = ''; // Effacer le message si le titre est unique
}
}).catch(error => {
console.error('Erreur:', error);
warningDiv.innerHTML = 'Erreur de réseau lors de la vérification du titre.';
warningDiv.style.color = 'orange'; // Mettre le texte en orange
});
});

document.getElementById('due_date').addEventListener('change', function () {
const selectedDate = new Date(this.value);
const today = new Date();
const timeDifference = selectedDate.getTime() - today.getTime();
const daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));

const warningMessage = document.getElementById('date_warning');

if (daysDifference < 1 && daysDifference > 0) {
warningMessage.style.display = 'block';
} else {
warningMessage.style.display = 'none';
}
});

function toggleFileUpload() {
const checkbox = document.getElementById('uploadFileCheckbox');
const fileUploadSection = document.getElementById('fileUploadSection');
const hiddenInput = document.querySelector('input[name="documents_attaches"]');

// Affiche ou masque la section d'upload en fonction de l'état de la case à cocher
if (checkbox.checked) {
fileUploadSection.style.display = 'block'; // Affiche la section
hiddenInput.value = '1'; // Change la valeur à 1
} else {
fileUploadSection.style.display = 'none'; // Masque la section
hiddenInput.value = '0'; // Change la valeur à 0
}
}

// Fonction pour bannir le point-virgule, la séquence "V(" et les guillemets uniquement pour le champ "title"
function bannirCaracteresInterdits(event) {
if (event.target.id === "title") {
event.target.value = event.target.value.replace(/[;""]|V\(/g, "");
} else {
event.target.value = event.target.value.replace(/[;]/g, "");
}
}

// Ajoute l'écouteur d'événements pour les champs du formulaire
const formFields = document.querySelectorAll('input[type="text"], textarea');
formFields.forEach(field => {
field.addEventListener('input', bannirCaracteresInterdits);
});
document.getElementById('due_date').addEventListener('change', function () {
const inputDate = new Date(this.value);
const currentDate = new Date();

// Calculer la date limite 48h après la date actuelle
const limitDate = new Date(currentDate.getTime() + 48 * 60 * 60 * 1000);
// ajout de 48 heures

// Vérifier si la date choisie est inférieure à la limite des 48 heures
if (inputDate < limitDate) {
document.getElementById('date_warning').style.display = 'block';
} else {
document.getElementById('date_warning').style.display = 'none';
}
});
				</script>
				<script>
					document.getElementById('taskForm').addEventListener('submit', function () { // Désactiver le bouton ENREGISTRER une fois cliqué
document.getElementById('submitButton').disabled = true;
// Optionnel : Changer le texte du bouton pour indiquer que la soumission est en cours
document.getElementById('submitButton').innerText = 'Enregistrement en cours...';
});
				</script>

				<script>
					// Initialisation du champ de date
document.addEventListener('DOMContentLoaded', function () {
const today = new Date();
const yyyy = today.getFullYear();
const mm = String(today.getMonth() + 1).padStart(2, '0'); // Mois de 0 à 11
const dd = String(today.getDate()).padStart(2, '0');
// Jours du mois

// Formater la date au format YYYY-MM-DD
const formattedDate = `${yyyy}-${mm}-${dd}`;
const dueDateInput = document.getElementById('due_date');
dueDateInput.setAttribute('min', formattedDate); // Définir la date minimale

dueDateInput.addEventListener('change', function () {
const inputDate = new Date(this.value);
const limitDate = new Date(today.getTime() + 48 * 60 * 60 * 1000); // 48 heures à partir de maintenant

if (inputDate < limitDate) {
document.getElementById('date_warning').style.display = 'block';
} else {
document.getElementById('date_warning').style.display = 'none';
}
});
});

// Exemple d'initialisation manuelle pour le dropdown
document.querySelectorAll('.dropdown-toggle').forEach(function (dropdownToggle) {
dropdownToggle.addEventListener('click', function () {
const dropdownMenu = dropdownToggle.nextElementSibling;
dropdownMenu.classList.toggle('show');
});
});
				</script>
			</body>
		</html>
	</body>
</html>
